{
  "version": 3,
  "sources": ["../../node_modules/permissionless/clients/pimlico.ts"],
  "sourcesContent": ["import type {\n    Account,\n    Chain,\n    Client,\n    PublicClientConfig,\n    Transport\n} from \"viem\"\nimport { createClient } from \"viem\"\nimport type { EntryPoint } from \"../types/entrypoint\"\nimport type {\n    PimlicoBundlerRpcSchema,\n    PimlicoPaymasterRpcSchema\n} from \"../types/pimlico\"\nimport { type BundlerActions, bundlerActions } from \"./decorators/bundler\"\nimport {\n    type PimlicoBundlerActions,\n    type PimlicoPaymasterClientActions,\n    pimlicoBundlerActions,\n    pimlicoPaymasterActions\n} from \"./decorators/pimlico\"\n\nexport type PimlicoBundlerClient<entryPoint extends EntryPoint> = Client<\n    Transport,\n    Chain | undefined,\n    Account | undefined,\n    PimlicoBundlerRpcSchema,\n    PimlicoBundlerActions & BundlerActions<entryPoint>\n>\n\nexport type PimlicoPaymasterClient<entryPoint extends EntryPoint> = Client<\n    Transport,\n    Chain | undefined,\n    Account | undefined,\n    PimlicoPaymasterRpcSchema<entryPoint>,\n    PimlicoPaymasterClientActions<entryPoint>\n>\n\n/**\n * Creates a pimlico specific Bundler Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).\n *\n * - Docs: https://docs.pimlico.io/permissionless/reference/clients/pimlicoBundlerClient\n *\n * A Pimlico Client is an interface to \"pimlico endpoints\" [JSON-RPC API](https://docs.pimlico.io/reference/bundler/endpoints) methods such as getting current blockchain gas prices, getting user operation status, etc through [Pimlico Bundler Actions](TODO://Add bundler action documentation link).\n *\n * @param config - {@link PublicClientConfig}\n * @returns A Pimlico Bundler Client. {@link PimlicoBundlerClient}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const pimlicoBundlerClient = createPimlicoBundlerClient({\n *   chain: mainnet,\n *   transport: http(\"https://api.pimlico.io/v2/goerli/rpc?apikey=YOUR_API_KEY_HERE\"),\n * })\n */\nexport const createPimlicoBundlerClient = <\n    entryPoint extends EntryPoint,\n    transport extends Transport = Transport,\n    chain extends Chain | undefined = undefined\n>(\n    parameters: PublicClientConfig<transport, chain> & {\n        entryPoint: entryPoint\n    }\n): PimlicoBundlerClient<entryPoint> => {\n    const { key = \"public\", name = \"Pimlico Bundler Client\" } = parameters\n    const client = createClient({\n        ...parameters,\n        key,\n        name,\n        type: \"pimlicoBundlerClient\"\n    })\n    return client\n        .extend(bundlerActions(parameters.entryPoint))\n        .extend(pimlicoBundlerActions(parameters.entryPoint))\n}\n\n/**\n * Creates a pimlico specific Paymaster Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).\n *\n * - Docs: https://docs.pimlico.io/permissionless/reference/clients/pimlicoPaymasterClient\n *\n * A Pimlico Paymaster Client is an interface to \"pimlico paymaster endpoints\" [JSON-RPC API](https://docs.pimlico.io/reference/verifying-paymaster/endpoints) methods such as sponsoring user operation, etc through Pimlico Paymaster Actions.\n *\n * @param config - {@link PublicClientConfig}\n * @returns A Pimlico Paymaster Client. {@link PimlicoPaymasterClient}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const pimlicoPaymasterClient = createPimlicoPaymasterClient({\n *   chain: mainnet,\n *   transport: http(\"https://api.pimlico.io/v2/goerli/rpc?apikey=YOUR_API_KEY_HERE\"),\n * })\n */\nexport const createPimlicoPaymasterClient = <\n    entryPoint extends EntryPoint,\n    transport extends Transport = Transport,\n    chain extends Chain | undefined = undefined\n>(\n    parameters: PublicClientConfig<transport, chain> & {\n        entryPoint: entryPoint\n    }\n): PimlicoPaymasterClient<entryPoint> => {\n    const { key = \"public\", name = \"Pimlico Paymaster Client\" } = parameters\n    const client = createClient({\n        ...parameters,\n        key,\n        name,\n        type: \"pimlicoPaymasterClient\"\n    })\n    return client.extend(pimlicoPaymasterActions(parameters.entryPoint))\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAwDO,IAAM,6BAA6B,CAKtC,eAGkC;AAClC,QAAM,EAAE,MAAM,UAAU,OAAO,yBAAwB,IAAK;AAC5D,QAAM,SAAS,aAAa;IACxB,GAAG;IACH;IACA;IACA,MAAM;GACT;AACD,SAAO,OACF,OAAO,eAAe,WAAW,UAAU,CAAC,EAC5C,OAAO,sBAAsB,WAAW,UAAU,CAAC;AAC5D;AAqBO,IAAM,+BAA+B,CAKxC,eAGoC;AACpC,QAAM,EAAE,MAAM,UAAU,OAAO,2BAA0B,IAAK;AAC9D,QAAM,SAAS,aAAa;IACxB,GAAG;IACH;IACA;IACA,MAAM;GACT;AACD,SAAO,OAAO,OAAO,wBAAwB,WAAW,UAAU,CAAC;AACvE;",
  "names": []
}
